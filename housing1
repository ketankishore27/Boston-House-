# ------------------------> Importing the required Libraries -----------------------------------

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from copy import deepcopy

# ------------------------> Getting the data ---------------------------------------------------

dataset_train = pd.read_csv('train.csv').iloc[:, 1:-1]
dataset_test = pd.read_csv('test.csv').iloc[:, 1:]
#dataset_test['SalePrice'] = 0

# ------------------------> Filling numerical spaces with mean (training set)--------------------
col_num = []
for i in dataset_train.columns:
    if (type(dataset_train[i][1]) == np.int64) or (type(dataset_train[i][1]) == np.float64):
        col_num.append(i)
        
col_cat = []
for i in dataset_train.columns:
    if (type(dataset_train[i][1]) != np.int64) and (type(dataset_train[i][1]) != np.float64):
        col_cat.append(i)

from sklearn.preprocessing import Imputer

imputer = Imputer(missing_values = np.nan, strategy = 'mean')

dataset_train_num = dataset_train[col_num]
dataset_train_num = pd.DataFrame(imputer.fit_transform(dataset_train_num[[i for i in dataset_train_num.columns 
                                                         if (type(dataset_train_num[i][1]) == np.int64) or 
                                                         (type(dataset_train_num[i][1]) == np.float64)]]), columns = col_num)    

dataset_train_cat = dataset_train[col_cat] 

dataset_train = pd.concat([dataset_train_num, dataset_train_cat], axis = 1)   

# ------------------------> Filling numerical spaces with mean (test set)--------------------
col_num = []
for i in dataset_test.columns:
    if (type(dataset_test[i][1]) == np.int64) or (type(dataset_test[i][1]) == np.float64):
        col_num.append(i)
        
col_cat = []
for i in dataset_test.columns:
    if (type(dataset_test[i][1]) != np.int64) and (type(dataset_test[i][1]) != np.float64):
        col_cat.append(i)

from sklearn.preprocessing import Imputer

imputer = Imputer(missing_values = np.nan, strategy = 'mean')

dataset_test_num = dataset_test[col_num]
dataset_test_num = pd.DataFrame(imputer.fit_transform(dataset_test_num[[i for i in dataset_test_num.columns 
                                                         if (type(dataset_test_num[i][1]) == np.int64) or 
                                                         (type(dataset_test_num[i][1]) == np.float64)]]), columns = col_num)    

dataset_test_cat = dataset_test[col_cat] 

dataset_test = pd.concat([dataset_test_num, dataset_test_cat], axis = 1)   

# --------------------> concatening training and test set ------------------------------------

dataset = pd.concat([dataset_train, dataset_test], axis = 0, join = 'inner')
#dataset = dataset.drop('SalePrice', axis = 1, inplace = True)

# --------------------> Filling Null values with the mode ------------------------------------

dataset.fillna(dataset.mode().iloc[0], inplace = True)

# --------------------> Getting Dummy Variables ----------------------------------------------

dataset = pd.get_dummies(dataset, drop_first=True)

# --------------------> Spliiting the dataset into training and test -------------------------

training_set = dataset.iloc[:1460, :]
test_set = dataset.iloc[1460:, :]

# --------------------> Using Random Forest --------------------------------------------------
X_train = training_set
y_train = pd.read_csv('train.csv').iloc[:, -1]

from sklearn.ensemble import RandomForestRegressor
regressor = RandomForestRegressor(n_estimators = 10, n_jobs = -1, random_state = 0)
regressor.fit(X_train, y_train)

from sklearn.model_selection import cross_val_score
score = cross_val_score(regressor, X = X_train, y = y_train, cv = 10)

# --------------------> Predicting the test Results ---

X_test = test_set
y_pred = regressor.predict(X_test)

# --------------------> trying to perform Lasso regression -----------------------------------

from sklearn.linear_model import Lasso
lasso = Lasso(alpha = 100, random_state = 0)
lasso.fit(X_train, y_train)

from sklearn.model_selection import cross_val_score
score = cross_val_score(lasso, X = X_train, y = y_train, cv = 10)
print(score.mean())

from sklearn.model_selection import GridSearchCV
parameter = [{'alpha' : [i for i in range(10,500,10)]}]
grid_search = GridSearchCV(estimator = lasso, param_grid = parameter, scoring = 'accuracy', cv = 1, n_jobs = -1)
grid_search.fit(X_train, y_train)

# --------------------> Predicting the test Results ---

y_pred = regressor.predict(X_test)
